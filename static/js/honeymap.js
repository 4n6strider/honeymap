// Generated by CoffeeScript 1.3.3

/*
This file is part of HoneyMap (https://github.com/fw42/honeymap/),
developed within the Honeynet Project (https://www.honeynet.org/),
written by Florian Weingarten, Mark Schloesser, Johannes Gilger.

See website for license and contact information.
*/


(function() {
  var Feed, Honeymap, Log, Marker, config,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Honeymap = (function() {

    function Honeymap(config) {
      var _this = this;
      this.config = config;
      this.hits = {
        region: {
          total: {}
        },
        marker: {
          total: 0
        }
      };
      this.captions = {};
      this.mapElem = jQuery('#world-map');
      this.fitSize();
      this.mapElem.vectorMap({
        backgroundColor: '',
        markerStyle: {
          initial: {
            fill: config.colors.src.fill,
            stroke: config.colors.src.stroke,
            r: 3
          }
        },
        series: {
          markers: [],
          regions: [
            {
              scale: config.colors.scale,
              attribute: 'fill',
              normalizeFunction: 'linear',
              values: {}
            }
          ]
        },
        onRegionLabelShow: function(ev, label, code) {
          label.html("<big>" + label.html() + "</big>");
          return label.append(Honeymap.eventCountSummary(_this.hits.region[code]));
        },
        onMarkerLabelShow: function(ev, label, code) {
          label.html(_this.captions[code]);
          return label.append(Honeymap.eventCountSummary(_this.hits.marker[code]));
        }
      });
      this.mapObj = this.mapElem.vectorMap('get', 'mapObject');
      this.mapObj.regions['US'].config.name = "USA";
    }

    Honeymap.prototype.fitSize = function() {
      this.mapElem.width(jQuery(document).width() - 100);
      return this.mapElem.height(0.8 * jQuery(document).height());
    };

    Honeymap.prototype.updateRegionColors = function() {
      this.mapObj.series.regions[0].params.min = null;
      this.mapObj.series.regions[0].params.max = null;
      return this.mapObj.series.regions[0].setValues(this.hits.region["total"]);
    };

    Honeymap.prototype.removeOldestMarker = function() {
      var id, par, toremove;
      toremove = jQuery(this.mapElem.find("svg g circle.jvectormap-marker[fill=" + this.config.colors.src.fill + "]")[0]);
      par = toremove.parent();
      id = toremove.attr('data-index');
      delete this.captions[id];
      this.mapObj.removeMarkers([id]);
      return par.remove();
    };

    Honeymap.prototype.regionCode = function(x, y) {
      var efp, rc;
      efp = jQuery(document.elementFromPoint(x + this.mapElem.offset().left, y + this.mapElem.offset().top));
      if (efp.is('path')) {
        return efp.attr('data-code');
      } else if (efp.is('circle') || (efp.is('div') && efp.hasClass('marker_animation'))) {
        efp.hide();
        rc = this.regionCode(x, y);
        efp.show();
        return rc;
      } else {
        return null;
      }
    };

    Honeymap.prototype.incMarkerCount = function(marker) {
      var rc, _base, _base1, _base2, _base3, _base4, _name, _name1, _name2;
      (_base = this.hits.marker)[_name = marker.id()] || (_base[_name] = {});
      (_base1 = this.hits.marker[marker.id()])[_name1 = marker.eventName] || (_base1[_name1] = 0);
      this.hits.marker[marker.id()][marker.eventName]++;
      if (!(marker.type === 'src' && (rc = marker.regionCode))) {
        return;
      }
      (_base2 = this.hits.region)[rc] || (_base2[rc] = {});
      (_base3 = this.hits.region[rc])[_name2 = marker.eventName] || (_base3[_name2] = 0);
      this.hits.region[rc][marker.eventName]++;
      (_base4 = this.hits.region["total"])[rc] || (_base4[rc] = 0);
      return this.hits.region["total"][rc]++;
    };

    Honeymap.prototype.addMarker = function(marker) {
      marker.animate();
      this.captions[marker.id()] = marker.caption();
      this.incMarkerCount(marker);
      this.updateRegionColors();
      if (this.mapObj.markers[marker.id()]) {
        console.log(marker.id() + " already exists");
        return;
      }
      this.hits.marker["total"]++;
      if (this.hits.marker["total"] > config.markersMaxVisible) {
        this.removeOldestMarker();
      }
      return this.mapObj.addMarker(marker.id(), {
        latLng: marker.gps(),
        name: marker.name(),
        style: this.config.colors[marker.type]
      }, []);
    };

    Honeymap.eventCountSummary = function(hits) {
      var count, summary, total, type;
      if (hits == null) {
        return;
      }
      total = 0;
      summary = "<hr/>";
      for (type in hits) {
        count = hits[type];
        summary += "<b>" + type + "</b>: " + (total += (count || (count = 0))) + "<br/>";
      }
      return summary + "<hr/><b>total</b>: " + total + " events";
    };

    return Honeymap;

  })();

  Marker = (function() {

    function Marker(map, lat, lng, type, eventName, regionCode, cityName) {
      var point;
      this.map = map;
      this.lat = lat;
      this.lng = lng;
      this.type = type || "src";
      this.eventName = eventName || "other";
      point = this.map.mapObj.latLngToPoint(this.lat, this.lng);
      this.x = point.x;
      this.y = point.y;
      this.regionCode = regionCode || this.map.regionCode(this.x, this.y);
      this.cityName = cityName;
    }

    Marker.prototype.animate = function() {
      var cssClass;
      cssClass = this.type === 'dst' ? 'markerdst' : 'markersrc';
      return this.map.mapElem.append(jQuery('<div class="marker_animation ' + cssClass + '"></div>').css('left', this.x + 'px').css('top', this.y + 'px').css({
        opacity: 1,
        scale: 0
      }).transition({
        opacity: 0,
        scale: 1
      }, 1000, 'linear', function() {
        return jQuery(this).remove();
      }));
    };

    Marker.prototype.caption = function() {
      var caption;
      caption = "<small>(" + this.lat + ", " + this.lng + ")</small><br/>";
      if (this.cityName) {
        caption += "<big>" + this.cityName + "</big> (" + this.regionCode + ")";
      }
      return caption;
    };

    Marker.prototype.id = function() {
      return this.lat + "," + this.lng;
    };

    Marker.prototype.name = function() {
      return "(" + this.lat + ", " + this.lng + ")";
    };

    Marker.prototype.gps = function() {
      return [this.lat, this.lng];
    };

    Marker.prototype.regionName = function() {
      if (this.regionCode) {
        return this.map.mapObj.getRegionName(this.regionCode);
      }
    };

    return Marker;

  })();

  Log = (function() {

    function Log(config) {
      this.elem = jQuery("#log");
      this.max = config.markersMaxVisible;
      this.fitSize();
    }

    Log.prototype.fitSize = function() {
      this.elem.width(0.5 * jQuery(document).width());
      this.elem.css("margin-top", 0.03 * jQuery(document).height());
      return this.elem.height(0.15 * jQuery(document).height());
    };

    Log.prototype.clearOld = function() {
      var entries;
      entries = this.elem.find("div.log_entry");
      if (entries.length >= this.max) {
        console.log("clearing");
        entries.slice(0, entries.length / 2).remove();
        return this.elem.find("br").nextUntil('div.log_entry', 'br').remove();
      }
    };

    Log.prototype.add = function(msg) {
      var scroll;
      this.clearOld();
      scroll = this.elem.scrollTop() + this.elem.innerHeight() === this.elem[0].scrollHeight;
      this.elem.append('<div class="log_entry">' + msg + '</div><br/>');
      if (scroll) {
        return this.elem.scrollTop(this.elem[0].scrollHeight);
      }
    };

    return Log;

  })();

  config = {
    markersMaxVisible: 150,
    colors: {
      src: {
        stroke: 'darkred',
        fill: 'red'
      },
      dst: {
        stroke: '#383F47',
        fill: '#F8E23B'
      },
      scale: ['#FFFFFF', '#0071A4']
    }
  };

  jQuery(document).ready(function() {
    var honeymap, log;
    log = new Log(config);
    honeymap = new Honeymap(config);
    jQuery(window).resize(function() {
      honeymap.fitSize();
      return log.fitSize();
    });
    log.add("<b>Welcome to HoneyMap. This is a BETA version! Bug reports welcome :-)</b>");
    log.add("Note that this is not <b>all</b> honeypots of the Honeynet Project,");
    log.add("only those who voluntarily publish their captures to hpfeeds!");
    log.add("<br/>");
    return new Feed(honeymap, log, 500);
  });

  Feed = (function() {

    function Feed(map, log, pause) {
      this.randomPoint = __bind(this.randomPoint, this);

      var _this = this;
      this.map = map;
      this.log = log;
      window.setInterval((function() {
        return window.setTimeout(_this.randomPoint, Math.random() * pause);
      }), 2 * pause);
    }

    Feed.prototype.randomPoint = function() {
      var lat, lng, marker;
      while (true) {
        lat = Math.random() * 180 - 90;
        lng = Math.random() * 360 - 180;
        marker = new Marker(this.map, lat, lng);
        if (marker.regionCode) {
          break;
        }
      }
      this.map.addMarker(marker);
      return this.log.add("New event in " + marker.regionName() + " (" + lat.toFixed(2) + ", " + lng.toFixed(2) + ")");
    };

    return Feed;

  })();

}).call(this);
