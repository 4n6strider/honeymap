// Generated by CoffeeScript 1.3.3

/*
This file is part of HoneyMap (https://github.com/fw42/honeymap/),
developed within the Honeynet Project (https://www.honeynet.org/),
written by Florian Weingarten, Mark Schloesser, Johannes Gilger.

See website for license and contact information.
*/


(function() {
  var Honeymap, Log, Marker, config;

  Honeymap = (function() {

    function Honeymap(config) {
      var _this = this;
      this.hits = {
        region: {},
        marker: {}
      };
      this.config = config;
      this.markerCaptions = {};
      this.mapElem = jQuery('#world-map');
      this.fitSize();
      this.mapElem.vectorMap({
        backgroundColor: '',
        markerStyle: {
          initial: {
            fill: config.colors.src.fill,
            stroke: config.colors.src.stroke,
            r: 3
          }
        },
        series: {
          markers: [],
          regions: [
            {
              scale: config.colors.scale,
              attribute: 'fill',
              normalizeFunction: 'linear',
              values: this.hits.region
            }
          ]
        },
        onRegionLabelShow: function(ev, label, code) {
          label.html("<big>" + label.html() + "</big>");
          return label.append(_this.eventCountSummary(_this.hits.region[code]));
        },
        onMarkerLabelShow: function(ev, label, code) {
          label.html(_this.markerCaptions[code]);
          return label.append(_this.eventCountSummary(_this.hits.marker[code]));
        }
      });
      this.mapObj = this.mapElem.vectorMap('get', 'mapObject');
      this.mapObj.regions['US'].config.name = "USA";
    }

    Honeymap.prototype.fitSize = function() {
      this.mapElem.width(jQuery(document).width() - 100);
      return this.mapElem.height(0.8 * jQuery(document).height());
    };

    Honeymap.eventCountSummary = function(hits) {
      var count, summary, total, type;
      summary = "";
      total = 0;
      for (type in hits) {
        count = hits[type];
        if (total === 0) {
          summary += "<hr/>";
        }
        summary += "<b>" + type + "</b>: " + (count || 0) + "<br/>";
        total += count;
      }
      if (total > 0) {
        summary += "<hr/><b>total</b>: " + total + " events";
      }
      return summary;
    };

    Honeymap.prototype.updateRegioncolors = function() {
      this.mapObj.series.regions[0].params.min = null;
      this.mapObj.series.regions[0].params.max = null;
      return this.mapObj.series.regions[0].setValues(regionhits_countonly);
    };

    Honeymap.prototype.removeOldestMarker = function() {
      var par, toremove;
      toremove = jQuery(this.mapElem.find("svg g circle.jvectormap-marker[fill=" + this.config.colors.src.fill + "]")[0]);
      par = toremove.parent();
      this.mapObj.removeMarkers([toremove.attr('data-index')]);
      return par.remove();
    };

    Honeymap.prototype.regionCode = function(x, y) {
      var efp, rc;
      efp = jQuery(document.elementFromPoint(x + this.mapElem.offset().left, y + this.mapElem.offset().top));
      if (efp.is('path')) {
        return efp.attr('data-code');
      } else if (efp.is('circle') || (efp.is('div') && efp.hasClass('marker_animation'))) {
        efp.hide();
        rc = this.regionCode(x, y);
        efp.show();
        return rc;
      } else {
        return null;
      }
    };

    Honeymap.prototype.incMarkerCount = function(type, eventName, marker) {
      var rc, _base, _base1, _base2, _base3, _name;
      if (type === 'src' && (rc = marker.regionCode)) {
        (_base = this.hits.region)[rc] || (_base[rc] = {});
        (_base1 = this.hits.region[rc])[eventName] || (_base1[eventName] = 0);
        this.hits.region[rc][eventname]++;
      }
      (_base2 = this.hits.marker)[_name = marker.id] || (_base2[_name] = {});
      (_base3 = this.hits.marker[marker.id])[eventName] || (_base3[eventName] = 0);
      return this.hits.marker[marker.id][eventName]++;
    };

    Honeymap.prototype.addMarker = function(lat, lng, type, eventName, regionCode) {
      var marker;
      eventName || (eventName = "other");
      type || (type = 'src');
      marker = new Marker(this, lat, lang, type, regionCode);
      marker.animate();
      this.incMarkerCount(type, eventName, marker);
      if (!this.mapObj.markers[marker.id]) {
        return;
      }
      markers_total++;
      if (markers_total >= markers_visible_max) {
        remove_oldest_marker();
      }
      return this.mapObj.addMarker(marker.id, {
        latLng: marker.gps,
        name: marker.name,
        style: this.config.colors[type]
      }, []);
    };

    return Honeymap;

  })();

  Marker = (function() {

    function Marker(map, lat, lng, type, regionCode, cityName) {
      var point;
      this.map = map;
      this.lat = lat;
      this.lng = lng;
      this.type = type;
      point = this.map.mapObj.latLngToPoint(this.lat, this.lng);
      this.x = point.x;
      this.y = point.y;
      this.regionCode = regionCode || this.map.regionCode(this.x, this.y);
      this.cityName = cityName;
    }

    Marker.prototype.animate = function() {
      var cssClass;
      cssClass = this.type === 'dst' ? 'markerdst' : 'markersrc';
      return this.map.mapElem.append(jQuery('<div class="marker_animation ' + cssClass + '"></div>').css('left', this.x + 'px').css('top', this.y + 'px').css({
        opacity: 1,
        scale: 0
      }).transition({
        opacity: 0,
        scale: 1
      }, 1000, 'linear', function() {
        return jQuery(this).remove();
      }));
    };

    Marker.prototype.id = function() {
      return this.lat + "," + this.lng;
    };

    Marker.prototype.name = function() {
      return "(" + this.lat + ", " + this.lng + ")";
    };

    Marker.prototype.gps = function() {
      return [this.lat, this.lng];
    };

    Marker.prototype.regionCode = function() {
      return this.rc || (this.rc = this.map.regionCode(this.x, this.y));
    };

    Marker.prototype.regionName = function() {
      if (this.regionCode()) {
        return this.map.mapObj.getRegionName(this.regionCode());
      }
    };

    Marker.prototype.setCaption = function(caption) {
      return this.map.markerCaptions[this.id()] = caption;
    };

    return Marker;

  })();

  Log = (function() {

    function Log(config) {
      this.elem = jQuery("#log");
      this.max = config.markers_visible;
      this.fitSize();
    }

    Log.prototype.fitSize = function() {
      this.elem.width(0.5 * jQuery(document).width());
      this.elem.css("margin-top", 0.03 * jQuery(document).height());
      return this.elem.height(0.15 * jQuery(document).height());
    };

    Log.prototype.clearOld = function() {
      var entries;
      entries = this.elem.find("div.log_entry");
      if (entries.length > this.max) {
        entries.slice(0, entries.length - 1 - this.max).remove();
        return this.elem.find("br").nextUntil('div.log_entry', 'br').remove();
      }
    };

    Log.prototype.add = function(msg) {
      var scroll;
      this.clearOld();
      scroll = this.elem.scrollTop() + this.elem.innerHeight() === this.elem[0].scrollHeight;
      this.elem.append('<div class="log_entry">' + msg + '</div><br/>');
      if (scroll) {
        return this.elem.scrollTop(this.elem[0].scrollHeight);
      }
    };

    return Log;

  })();

  config = {
    markers_visible: 150,
    colors: {
      src: {
        stroke: 'darkred',
        fill: 'red'
      },
      dst: {
        stroke: '#383F47',
        fill: '#F8E23B'
      },
      scale: ['#FFFFFF', '#0071A4']
    }
  };

  jQuery(document).ready(function() {
    var honeymap, log;
    log = new Log(config);
    honeymap = new Honeymap(config);
    jQuery(window).resize(function() {
      honeymap.fitSize();
      return log.fitSize();
    });
    log.add("<b>Welcome to HoneyMap. This is a BETA version! Bug reports welcome :-)</b>");
    log.add("Note that this is not <b>all</b> honeypots of the Honeynet Project,");
    log.add("only those who voluntarily publish their captures to hpfeeds!");
    return log.add("<br/>");
  });

}).call(this);
